#!/bin/bash

# Constants for system-wide paths
BASE_DIR="/usr/infostack"
PKG_DIR="$BASE_DIR/pkg"
PROGRAM_DATA_DIR="$BASE_DIR/program/data"
MASTER_DIR="$BASE_DIR/master"

log_message() {
    echo "$(date): $1" >> "$MASTER_DIR/log.txt"
}

# Function to fetch INFOLATESTVERSION from a remote URL
get_remote_version() {
    local manifest_url="$1"
    local remote_version

    # Download the manifest
    temp_manifest=$(mktemp)
    curl -sSL "$manifest_url" -o "$temp_manifest"

    # Extract INFOLATESTVERSION from the manifest
    source "$temp_manifest"
    remote_version="${INFOLATESTVERSION}"

    # Clean up
    rm -f "$temp_manifest"

    echo "$remote_version"
}

# Function to compare versions
compare_versions() {
    # Arguments: $1 = current version, $2 = new version
    if [[ "$(echo -e "$1\n$2" | sort -V | head -n1)" == "$2" ]]; then
        return 1  # New version is higher
    else
        return 0  # Current version is equal or higher
    fi
}

update_all_packages() {
    # Iterate over all installed packages and check for updates
    log_message "Checking for updates for all installed packages..."
    
    for pkg_dir in "$PKG_DIR"/*; do
        if [[ -d "$pkg_dir" ]]; then
            pkg_name=$(basename "$pkg_dir")
            echo "Checking package: $pkg_name"

            # Read the manifest URL for the package from source.txt
            if [[ -f "$pkg_dir/source.txt" ]]; then
                manifest_url=$(cat "$pkg_dir/source.txt")
                remote_version=$(get_remote_version "$manifest_url")

                # Read current version from version.txt
                current_version=$(cat "$pkg_dir/version.txt")

                # Compare the versions
                compare_versions "$current_version" "$remote_version"
                if [[ $? -eq 1 ]]; then
                    echo "Updating package: $pkg_name"
                    install_package "$manifest_url"
                else
                    echo "Package $pkg_name is up to date."
                fi
            else
                echo "No source.txt found for package: $pkg_name"
            fi
        fi
    done
}

update_infostack() {
    # Check for InfoStack update
    log_message "Checking for updates for InfoStack..."
    if [[ -f "$MASTER_DIR/version.txt" && -f "$MASTER_DIR/source.txt" ]]; then
        current_version=$(cat "$MASTER_DIR/version.txt")
        manifest_url=$(cat "$MASTER_DIR/source.txt")
        remote_version=$(get_remote_version "$manifest_url")
        
        compare_versions "$current_version" "$remote_version"
        if [[ $? -eq 0 ]]; then
            # New version is available
            echo "InfoStack $current_version > $remote_version"
            echo "Updating InfoStack, please do not operate..."
            install_master_package $manifest_url
        else
            echo "InfoStack is up to date."
        fi
    else
        echo "Metadata for InfoStack not found in $MASTER_DIR."
    fi
}

install_package() {
    local manifest_url="$1"
    local pkg_name
    local latest_version
    local current_version
    local remote_version
    local source_url

    log_message "Fetching manifest from: $manifest_url"
    temp_manifest=$(mktemp)
    curl -sSL "$manifest_url" -o "$temp_manifest"
    source "$temp_manifest"

    pkg_name="${INFOSOFTWARENAME}"
    latest_version="${INFOLATESTVERSION}"
    source_url="${INFOREPOSOURCE}"

    pkg_metadata_dir="$PKG_DIR/$pkg_name"
    mkdir -p "$pkg_metadata_dir"

    # Read current version from version.txt if it exists
    if [[ -f "$pkg_metadata_dir/version.txt" ]]; then
        current_version=$(cat "$pkg_metadata_dir/version.txt")
    else
        current_version="0.0.0"  # Assuming it's the first installation
    fi

    # Fetch remote version by looking at the URL in source.txt
    if [[ -f "$pkg_metadata_dir/source.txt" ]]; then
        source_url=$(cat "$pkg_metadata_dir/source.txt")
    else
        log_message "Error: source.txt not found for $pkg_name"
        return 1
    fi

    # Get the remote version
    remote_version=$(get_remote_version "$source_url")

    # Compare versions to check if an update is needed
    compare_versions "$current_version" "$remote_version"
    if [[ $? -eq 1 ]]; then
        log_message "Update found! Current version: $current_version, Remote version: $remote_version"
    else
        log_message "No update needed. Current version: $current_version, Remote version: $remote_version"
        return
    fi

    # Proceed with installation if update is needed
    log_message "Resolving dependencies for $pkg_name..."
    for dep in "${DEPENDENCIES[@]}"; do
        IFS=: read -r source_type source <<< "$dep"
        case "$source_type" in
            infopac) infopac -S "$source" ;;
            gz) gz -S "$source" ;;
            pacman) sudo pacman -S --needed --noconfirm "$source" ;;
            manual)
                echo "Please follow manual dependency instructions: $source"
                ;;
            *) echo "Unknown dependency type: $source_type" ;;
        esac
    done

    if [[ "$INFOINSTALLABLE" == "true" ]]; then
        temp_installer=$(mktemp)
        curl -sSL "$INFOINSTALLERSOURCE" -o "$temp_installer"
        chmod +x "$temp_installer"
        bash "$temp_installer"
        rm -f "$temp_installer"
    fi

    # Save the new version and source details
    echo "$source_url" > "$pkg_metadata_dir/source.txt"
    echo "$remote_version" > "$pkg_metadata_dir/version.txt"
    cp "$temp_manifest" "$pkg_metadata_dir/infostack.sh"
    rm -f "$temp_manifest"

    log_message "Installation of $pkg_name ($remote_version) completed."
}

install_master_package() {
    local manifest_url="$1"
    local pkg_name
    local latest_version
    local current_version
    local remote_version
    local source_url

    log_message "Fetching manifest from: $manifest_url"
    temp_manifest=$(mktemp)
    curl -sSL "$manifest_url" -o "$temp_manifest"
    source "$temp_manifest"

    pkg_name="${INFOSOFTWARENAME}"
    latest_version="${INFOLATESTVERSION}"
    source_url="${INFOREPOSOURCE}"

    pkg_metadata_dir="$MASTER_DIR"
    mkdir -p "$pkg_metadata_dir"

    # Read current version from version.txt if it exists
    if [[ -f "$pkg_metadata_dir/version.txt" ]]; then
        current_version=$(cat "$pkg_metadata_dir/version.txt")
    else
        current_version="0.0.0"  # Assuming it's the first installation
    fi

    # Fetch remote version by looking at the URL in source.txt
    if [[ -f "$pkg_metadata_dir/source.txt" ]]; then
        source_url=$(cat "$pkg_metadata_dir/source.txt")
    else
        log_message "Error: source.txt not found for $pkg_name"
        return 1
    fi

    # Get the remote version
    remote_version=$(get_remote_version "$source_url")

    # Compare versions to check if an update is needed
    compare_versions "$current_version" "$remote_version"
    if [[ $? -eq 1 ]]; then
        log_message "Update found! Current version: $current_version, Remote version: $remote_version"
    else
        log_message "No update needed. Current version: $current_version, Remote version: $remote_version"
        return
    fi

    # Proceed with installation if update is needed
    log_message "Resolving dependencies for $pkg_name..."
    for dep in "${DEPENDENCIES[@]}"; do
        IFS=: read -r source_type source <<< "$dep"
        case "$source_type" in
            infopac) infopac -S "$source" ;;
            gz) gz -S "$source" ;;
            pacman) sudo pacman -S --needed --noconfirm "$source" ;;
            manual)
                echo "Please follow manual dependency instructions: $source"
                ;;
            *) echo "Unknown dependency type: $source_type" ;;
        esac
    done

    if [[ "$INFOINSTALLABLE" == "true" ]]; then
        temp_installer=$(mktemp)
        curl -sSL "$INFOINSTALLERSOURCE" -o "$temp_installer"
        chmod +x "$temp_installer"
        bash "$temp_installer"
        rm -f "$temp_installer"
    fi

    # Save the new version and source details
    echo "$source_url" > "$pkg_metadata_dir/source.txt"
    echo "$remote_version" > "$pkg_metadata_dir/version.txt"
    cp "$temp_manifest" "$pkg_metadata_dir/infostack.sh"
    rm -f "$temp_manifest"

    log_message "Installation of $pkg_name ($remote_version) completed."
}

remove_package() {
    local pkg_name="$1"

    # Check if the package directory exists
    pkg_metadata_dir="$PKG_DIR/$pkg_name"
    if [[ ! -d "$pkg_metadata_dir" ]]; then
        log_message "Error: Package $pkg_name not found."
        echo "Package $pkg_name is not installed."
        return 1
    fi

    # Remove the package files and metadata
    log_message "Removing package: $pkg_name"
    rm -rf "$pkg_metadata_dir"

    # Optionally remove program files if they exist
    program_files_dir="$BASE_DIR/program/files/$pkg_name"
    if [[ -d "$program_files_dir" ]]; then
        rm -rf "$program_files_dir"
        log_message "Removed program files for $pkg_name."
    fi

    echo "Package $pkg_name has been removed."
    log_message "Package $pkg_name removed successfully."
}

check_for_updates() {
    # Check for InfoStack update
    log_message "Checking for updates for InfoStack..."
    if [[ -f "$MASTER_DIR/version.txt" && -f "$MASTER_DIR/source.txt" ]]; then
        current_version=$(cat "$MASTER_DIR/version.txt")
        manifest_url=$(cat "$MASTER_DIR/source.txt")
        remote_version=$(get_remote_version "$manifest_url")
        
        compare_versions "$current_version" "$remote_version"
        if [[ $? -eq 0 ]]; then
            # New version is available
            echo "InfoStack $current_version > $remote_version"
        else
            echo "InfoStack is up to date."
        fi
    else
        echo "Metadata for InfoStack not found in $MASTER_DIR."
    fi

    # Iterate over all installed packages and check if updates are available
    log_message "Checking for updates for all installed packages (no installation)..."
    for pkg_dir in "$PKG_DIR"/*; do
        if [[ -d "$pkg_dir" ]]; then
            pkg_name=$(basename "$pkg_dir")

            # Read the manifest URL for the package from source.txt
            if [[ -f "$pkg_dir/source.txt" ]]; then
                manifest_url=$(cat "$pkg_dir/source.txt")
                remote_version=$(get_remote_version "$manifest_url")

                # Read current version from version.txt
                if [[ -f "$pkg_dir/version.txt" ]]; then
                    current_version=$(cat "$pkg_dir/version.txt")
                else
                    current_version="0.0.0"
                fi

                # Compare the versions
                compare_versions "$current_version" "$remote_version"
                if [[ $? -eq 1 ]]; then
                    # New version is available
                    echo "$pkg_name $current_version > $remote_version"
                else
                    # Package is up-to-date
                    echo "$pkg_name is up to date."
                fi
            else
                echo "No source.txt found for package: $pkg_name"
            fi
        fi
    done
}

case "$1" in
    -S)
        if [[ -n "$2" ]]; then
            install_package "$2"
        else
            echo "Usage: infostack -S <manifest_url>"
        fi
        ;;
    -Sy)
        # Check for updates without installing them
        echo "Checking for available updates..."
        check_for_updates
        ;;
    -Syu)
        # Update all packages
        echo "Updating all packages..."
        update_all_packages
        
        # Update infostack itself
        update_infostack
        ;;
    -R)
        if [[ -n "$2" ]]; then
            remove_package "$2"
        else
            echo "Usage: infostack -R <package_name>"
        fi
        ;;
    --help)
        echo "InfoStack Usage:"
        echo "-S <manifest_url> - Install a package."
        echo "-Sy - Check for updates."
        echo "-Syu - Update all packages."
        echo "-R <package_name> - Remove a package."
        echo "--help - Show this message."
        echo "--version - Show your InfoStack version."
        ;;
    --version)
        echo "InfoStack version $(cat /usr/infostack/master/version.txt)"
        ;;
    *)
        echo "Please use a valid command or use 'infostack --help' to see all commands."
        ;;
esac
